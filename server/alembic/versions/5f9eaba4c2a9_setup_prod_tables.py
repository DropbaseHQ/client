"""setup prod tables

Revision ID: 802e8f5cfec1
Revises: 
Create Date: 2023-11-10 15:18:04.933477

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '802e8f5cfec1'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('trial_eligible', sa.Boolean(), nullable=True),
    sa.Column('date', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('workspace',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('date', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('app',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('workspace_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('is_draft', sa.BOOLEAN(), nullable=True),
    sa.Column('date', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspace.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('group',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('workspace_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('date', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspace.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('role',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('workspace_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('is_default', sa.Boolean(), nullable=False),
    sa.Column('date', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.CheckConstraint('false OR false', name='workspace_id_check'),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspace.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('token',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('token', sa.String(), nullable=False),
    sa.Column('workspace_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('comment', sa.String(), nullable=True),
    sa.Column('date', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspace.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('page',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('app_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('date', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['app_id'], ['app.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'app_id', name='unique_page_name_per_app')
    )
    op.create_table('policy',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('role_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('workspace_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('ptype', sa.String(), nullable=False),
    sa.Column('v0', sa.String(), nullable=True),
    sa.Column('v1', sa.String(), nullable=True),
    sa.Column('v2', sa.String(), nullable=True),
    sa.Column('v3', sa.String(), nullable=True),
    sa.Column('v4', sa.String(), nullable=True),
    sa.Column('v5', sa.String(), nullable=True),
    sa.Column('date', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspace.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('ptype', 'v0', 'v1', 'v2', 'v3', 'v4', 'v5', 'workspace_id', name='unique_policy_constraint')
    )
    op.create_table('user_group',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('group_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('role', sa.String(), nullable=True),
    sa.Column('date', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['group.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_role',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('workspace_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('role_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('date', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspace.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('files',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('type', sa.String(), nullable=True),
    sa.Column('source', sa.String(), nullable=True),
    sa.Column('page_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('date', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['page_id'], ['page.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'page_id', name='unique_file_name_per_page')
    )
    op.create_table('widget',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('property', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('page_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('date', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['page_id'], ['page.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'page_id', name='unique_widget_name_per_page')
    )
    op.create_table('components',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('property', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('widget_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('after', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('type', sa.String(), nullable=True),
    sa.Column('date', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['after'], ['components.id'], ),
    sa.ForeignKeyConstraint(['widget_id'], ['widget.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tables',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('property', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('file_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('page_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('depends_on', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('date', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['file_id'], ['files.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['page_id'], ['page.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'page_id', name='unique_table_name_per_page')
    )
    op.create_table('columns',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('property', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('table_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('type', sa.String(), nullable=True),
    sa.Column('date', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['table_id'], ['tables.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('pinned_filters',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('filters', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('sorts', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('table_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('date', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['table_id'], ['tables.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('pinned_filters')
    op.drop_table('columns')
    op.drop_table('tables')
    op.drop_table('components')
    op.drop_table('widget')
    op.drop_table('files')
    op.drop_table('user_role')
    op.drop_table('user_group')
    op.drop_table('policy')
    op.drop_table('page')
    op.drop_table('token')
    op.drop_table('role')
    op.drop_table('group')
    op.drop_table('app')
    op.drop_table('workspace')
    op.drop_table('user')
    # ### end Alembic commands ###
