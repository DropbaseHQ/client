- name: Deploy new application container
  hosts: all
  gather_facts: no
  become: yes
  vars:
    ecr_repo: ""
    aws_region: "us-east-1"
    domain: ""
    app_name: api
    port: 8000
    deploy_user: "{{ ansible_user }}"
    deploy_dir: "/home/dropbase/app/api"
    env: "dev"
  vars_files:
    - config/{{ env }}.yml

  tasks:
    - name: Debug message
      debug:
        msg: Using {{ deploy_user }} user to deploy {{ domain }} app

    - name: Enable nginx package
      shell: sudo amazon-linux-extras enable nginx1

    - name: Install service packages
      package:
        name:
          - nginx
          - docker
        state: latest

    - name: Install pip packages
      pip:
        name:
          - docker
          - docker-compose
          - certbot==2.6.0
          - certbot-nginx==2.6.0
          - urllib3==1.26.15

    - name: Make sure deploy user belong to group "wheel" and "docker" group
      user:
        name: "{{ deploy_user }}"
        groups:
          - wheel
          - docker
        append: yes
      become: yes

    - name: Make sure services are enabled and started
      service:
        name: "{{ item }}"
        state: started
        enabled: yes
      with_items:
        - nginx
        - docker

    - name: Check if Letsencrypt certificate files exist
      stat:
        path: "/etc/letsencrypt/live/{{ domain }}/fullchain.pem"
      register: _cert

    - name: Request certificate
      shell: "sudo /usr/local/bin/certbot certonly --nginx -d {{ domain }} -m khanh@dropbase.io --renew-by-default --non-interactive --agree-tos"
      when: not _cert.stat.exists

    - name: Create cronjob for renewing the certificate
      cron:
        name: "{{ domain }} certificate renewable"
        special_time: weekly
        job: "/usr/local/bin/certbot certonly --nginx -d {{ domain }} -m khanh@dropbase.io --renew-by-default && systemctl reload nginx"

    - name: Create nginx vhost configuration
      template:
        src: templates/nginx.conf
        dest: /etc/nginx/conf.d/api.conf
        owner: root
        group: root
        mode: '0644'
      register: _nginx_conf

    - name: Restart nginx if vhost config changed
      service:
        name: nginx
        state: restarted
      when: _nginx_conf.changed

    - name: Make sure docker-compose exists
      file:
        path: "{{ deploy_dir }}"
        state: directory
        mode: '0755'

    - name: Create docker-compose.yml configuration
      template:
        src: templates/docker-compose.yml
        dest: "{{ deploy_dir }}/docker-compose.yml"
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: '0644'

    - name: Lookup secret from AWS Secrets Manager and update variables
      set_fact:
        secret_environment_variables: "{{ secret_environment_variables|combine({item: lookup('amazon.aws.aws_secret', secret_environment_variables[item], region=aws_region)}, recursive=true) }}"
      with_items: "{{ secret_environment_variables }}"

    - name: Create app vars.env file
      template:
        src: templates/vars.env
        dest: "{{ deploy_dir }}/vars.env"
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: '0644'

    - name: Configure ECR credential
      shell: aws ecr get-login-password --region {{ aws_region }} | docker login --username AWS --password-stdin {{ ecr_repo }}
      when: ecr_repo is not none and ecr_repo != '' and aws_region is not none and aws_region != ''

    - name: Pull and up the docker container
      community.docker.docker_compose:
        project_src: "{{ deploy_dir }}"
        build: false
        pull: true
